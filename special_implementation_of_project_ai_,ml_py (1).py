# -*- coding: utf-8 -*-
"""special implementation of project ai ,ml .py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RU8BK-L2Qkl3UjwyWgXSinVlrWISmoXD
"""

!pip install gradio joblib pandas scikit-learn

import os
print(os.listdir())  # Should include salary_prediction_model.pkl

#Employee Salary Predicyion using adult.csv
#Load your library
import pandas as pd

data =pd.read_csv('/content/adult 3.csv')

import os
print(os.listdir())  # Should list salary_prediction_model.pkl

data

# how many rows and columns we have
data.shape

#showing the first rows
data.head()

data.head(7)

#showing the last rows
data.tail()

#check null values
data.isna()

#whether any null values in the coloumns
data.isna().sum()

print(data.occupation.value_counts())
print(data.education.value_counts())
print(data.workclass.value_counts())
print(data.gender.value_counts())
print(data['marital-status'].value_counts())
print(data['native-country'].value_counts())

data=data[data['education']!='Preschool']
data=data[data['education']!='1st-4th']
data=data[data['education']!='5th-6th']
print(data.education.value_counts())

data=data[data['workclass']!='Never-worked']
data=data[data['workclass']!='Without-pay']
print(data.workclass.value_counts())

(data.occupation.replace({'?':'Others'},inplace=True))
data=data[data['occupation']!='Armed-Forces']
print(data.occupation.value_counts())

(data['native-country'].replace({'?':'Not mentioned'},inplace=True))
print(data['native-country'].value_counts())

data=data[data['native-country']!='Holand-Netherlands']
data=data[data['native-country']!='Laos']
data=data[data['native-country']!='Outlying-US(Guam-USVI-etc)']
data=data[data['native-country']!='Yugoslavia']
data=data[data['native-country']!='Hungary']
data=data[data['native-country']!='Honduras']
data=data[data['native-country']!='Scotland']
print(data['native-country'].value_counts())

(data.workclass.replace({'?':'Not_listed'},inplace=True))
print(data.workclass.value_counts())

data

#outlier
import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

data=data[(data['age']<=75)&(data['age']>=17)]
plt.boxplot(data['age'])
plt.show()

data.shape

plt.boxplot(data['capital-gain'])
plt.show()

plt.boxplot(data['educational-num'])
data=data[(data['educational-num']<=16)&(data['educational-num']>=5)]
plt.show()

plt.boxplot(data['hours-per-week'])
plt.show()

data.shape

#label encoding
from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']= encoder.fit_transform(data['workclass'])
data['marital-status']= encoder.fit_transform(data['marital-status'])
data['occupation']= encoder.fit_transform(data['occupation'])
data['relationship']= encoder.fit_transform(data['relationship'])
data['race']= encoder.fit_transform(data['race'])
data['gender']= encoder.fit_transform(data['gender'])
data['native-country']= encoder.fit_transform(data['native-country'])

data

x=data.drop(columns=['income']) #input
y=data['income']  #output
x

y

import pandas as pd
import joblib

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

# ✅ Load dataset
data = pd.read_csv("/content/adult 3.csv")

# ✅ Drop missing values
data.dropna(inplace=True)

# ✅ Fix column name if needed
if "education_num" in data.columns:
    data.rename(columns={"education_num": "education-num"}, inplace=True)

# ✅ Prepare input and target
X = data.drop(columns=["income"])
y = data["income"]

# ✅ Column types
numeric_features = X.select_dtypes(include=["int64", "float64"]).columns.tolist()
categorical_features = X.select_dtypes(include=["object"]).columns.tolist()

# ✅ Preprocessing
preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numeric_features),
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
])

# ✅ Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ✅ Define models
models = {
    "LogisticRegression": LogisticRegression(max_iter=1000),
    "DecisionTree": DecisionTreeClassifier(),
    "RandomForest": RandomForestClassifier(),
    "SVM": SVC(),
    "NaiveBayes": GaussianNB(),
    "KNN": KNeighborsClassifier(),
    "GradientBoosting": GradientBoostingClassifier()
}

# ✅ Train all and select best
best_model = None
best_accuracy = 0
best_pipeline = None

for name, model in models.items():
    pipeline = Pipeline([
        ("preprocessor", preprocessor),
        ("classifier", model)
    ])
    try:
        pipeline.fit(X_train, y_train)
        acc = accuracy_score(y_test, pipeline.predict(X_test))
        print(f"{name} Accuracy: {acc:.4f}")
        if acc > best_accuracy:
            best_model = name
            best_pipeline = pipeline
            best_accuracy = acc
    except Exception as e:
        print(f"{name} failed: {e}")

# ✅ Save model
joblib.dump(best_pipeline, "salary_prediction_model.pkl")
print(f"\n✅ Best model: {best_model} with accuracy: {best_accuracy:.4f}")

results = {
    'LogisticRegression': 0.8570,
    'DecisionTree': 0.8207,
    'RandomForest': 0.8586,
    'SVM': 0.8629,
    'NaiveBayes': 0.74,
    'KNN': 0.8386,
    'GradientBoosting': 0.8740
}

import matplotlib.pyplot as plt

plt.bar(list(results.keys()), list(results.values()), color='red')
plt.ylabel('Accuracy Score')
plt.title('Model Comparison')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(list(results.keys()), list(results.values()), marker='o', color='blue', linewidth=2)
plt.ylabel('Accuracy Score')
plt.title('Model Comparison - Line Chart')
plt.xticks(rotation=45)
plt.grid(True)
plt.ylim(0, 1)
plt.tight_layout()
plt.show()

import pandas as pd
import joblib

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

# ✅ Load dataset (replace with your actual uploaded path)
data = pd.read_csv("/content/adult 3.csv")

# ✅ Drop missing values (optional but recommended)
data.dropna(inplace=True)

# ✅ Target & Features
X = data.drop(columns=['income'])
y = data['income']

# ✅ Column categorization
numeric_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
categorical_features = X.select_dtypes(include=['object']).columns.tolist()

# ✅ Preprocessing
preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numeric_features),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
])

# ✅ Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ✅ All models
models = {
    "LogisticRegression": LogisticRegression(max_iter=1000),
    "DecisionTree": DecisionTreeClassifier(),
    "RandomForest": RandomForestClassifier(),
    "SVM": SVC(),
    "NaiveBayes": GaussianNB(),
    "KNN": KNeighborsClassifier(),
    "GradientBoosting": GradientBoostingClassifier()
}

# ✅ Training & Selecting Best
best_model = None
best_accuracy = 0
best_pipeline = None

for name, model in models.items():
    pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('classifier', model)
    ])
    try:
        pipeline.fit(X_train, y_train)
        acc = accuracy_score(y_test, pipeline.predict(X_test))
        print(f"{name} Accuracy: {acc:.4f}")
        if acc > best_accuracy:
            best_accuracy = acc
            best_model = name
            best_pipeline = pipeline
    except Exception as e:
        print(f"{name} failed: {e}")

print(f"\n✅ Best model: {best_model} with accuracy: {best_accuracy:.4f}")

# ✅ Save best model
joblib.dump(best_pipeline, "salary_prediction_model.pkl")
print("✅ Model saved as 'salary_prediction_model.pkl'")

!pip install streamlit pyngrok --quiet

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title("💼 Salary Prediction App")
# st.write("✅ Streamlit is working inside Colab!")
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# # app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # Load the trained pipeline model
# model = joblib.load("salary_prediction_model.pkl")
# 
# # Page config
# st.set_page_config(page_title="Salary Prediction", layout="centered")
# 
# # Optional custom CSS for compact card layout
# st.markdown("""
#     <style>
#     .main {
#         background-color: #f7f7f7;
#     }
#     .card {
#         background-color: white;
#         padding: 2rem;
#         border-radius: 12px;
#         box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
#         max-width: 700px;
#         margin: auto;
#     }
#     </style>
# """, unsafe_allow_html=True)
# 
# with st.container():
#     st.markdown('<div class="card">', unsafe_allow_html=True)
#     st.title("💼 Employee Salary Prediction")
#     st.markdown("Predict whether an individual's income exceeds $50K/year.")
# 
#     col1, col2 = st.columns(2)
# 
#     with col1:
#         age = st.slider("Age", 17, 75, 35)
#         fnlwgt = st.number_input("fnlwgt (Population Weight)", value=100000)
#         educational_num = st.slider("Educational Number (1–16)", 1, 16, 10)
#         hours_per_week = st.slider("Hours Per Week", 1, 100, 40)
#         capital_gain = st.number_input("Capital Gain", value=0)
#         capital_loss = st.number_input("Capital Loss", value=0)
# 
#     with col2:
#         workclass = st.selectbox("Workclass", [
#             "Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", "Local-gov",
#             "State-gov", "Without-pay", "Never-worked"
#         ])
#         education = st.selectbox("Education", [
#             "Bachelors", "HS-grad", "11th", "Masters", "9th", "Some-college", "Assoc-acdm",
#             "Assoc-voc", "7th-8th", "Doctorate", "Prof-school", "12th", "10th"
#         ])
#         marital_status = st.selectbox("Marital Status", [
#             "Married-civ-spouse", "Divorced", "Never-married", "Separated", "Widowed", "Married-spouse-absent"
#         ])
#         occupation = st.selectbox("Occupation", [
#             "Tech-support", "Craft-repair", "Other-service", "Sales", "Exec-managerial",
#             "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct", "Adm-clerical",
#             "Farming-fishing", "Transport-moving", "Priv-house-serv", "Protective-serv", "Armed-Forces"
#         ])
#         relationship = st.selectbox("Relationship", [
#             "Wife", "Own-child", "Husband", "Not-in-family", "Other-relative", "Unmarried"
#         ])
#         race = st.selectbox("Race", [
#             "White", "Asian-Pac-Islander", "Amer-Indian-Eskimo", "Other", "Black"
#         ])
#         gender = st.selectbox("Gender", ["Male", "Female"])
#         native_country = st.selectbox("Native Country", [
#             "United-States", "Mexico", "Philippines", "Germany", "Canada", "India",
#             "England", "Cuba", "Jamaica", "South", "Puerto-Rico", "Honduras"
#         ])
# 
#     st.markdown("---")
# 
#     if st.button("🔍 Predict Salary"):
#         input_df = pd.DataFrame([{
#             "age": age,
#             "fnlwgt": fnlwgt,
#             "educational-num": educational_num,
#             "hours-per-week": hours_per_week,
#             "capital-gain": capital_gain,
#             "capital-loss": capital_loss,
#             "workclass": workclass,
#             "education": education,
#             "marital-status": marital_status,
#             "occupation": occupation,
#             "relationship": relationship,
#             "race": race,
#             "gender": gender,
#             "native-country": native_country
#         }])
#         try:
#             pred = model.predict(input_df)[0]
#             label = "💰 Income >50K" if pred in [">50K", 1] else "💼 Income ≤50K"
#             st.success(label)
#         except Exception as e:
#             st.error(f"Prediction error: {e}")
# 
#     st.markdown('</div>', unsafe_allow_html=True)
# 
# 
#

!pip install streamlit pyngrok

!ngrok config add-authtoken 30DkB8AC5t1eIiikmyqiCrlssXh_5Arawvcf2UXYBjA1u6uDQ

import os
import threading

def run_streamlit():
    # Launch Streamlit on port 8501
    os.system('streamlit run app.py --server.port 8501')

# Start the Streamlit thread
thread = threading.Thread(target=run_streamlit)
thread.start()

from pyngrok import ngrok, conf

# Kill any existing ngrok tunnels
ngrok.kill()

# Start new tunnel
public_url = ngrok.connect(8501)
print("✅ Streamlit app is live at:", public_url)

